#########################################################
#                       NETWORK                         #
#########################################################

networks:
  transcendence:
    driver: bridge

#########################################################
#                       VOLUMES                         #
#########################################################

volumes:
  content:
    driver: local
  userbase:
    driver: local
  portainer_data:
    driver: local
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

#########################################################
#                       SERVICES                        #
#########################################################

services:
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "1080:1080"
    restart: always
    depends_on:
      fastify:
        condition: service_healthy
    volumes:
      - content:/usr/share/nginx/html:ro
    networks:
      - transcendence

  fastify:
    build: ./fastify
    container_name: fastify
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - content:/usr/src/app/content
      - userbase:/usr/src/app/db
    restart: always
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "sqlite3", "db/mydatabase.db", "SELECT 1"]
      interval: 10s
      retries: 5
      timeout: 5s

  adminer:
    build: ./adminer
    container_name: adminer
    depends_on:
      fastify:
        condition: service_healthy
    environment:
      - PUID=1000  # Adjust to match your user ID (UID) if needed
      - PGID=1000  # Adjust to match your group ID (GID) if needed
      - TZ=Etc/UTC  # Set timezone
    volumes:
      - userbase:/db
    ports:
      - "127.0.0.1:1090:1090"
    restart: always
    networks:
      - transcendence

  portainer:
    build: ./portainer
    container_name: portainer
    ports:
      - "127.0.0.1:9000:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - transcendence

# ELK Stack (elastic search, logstash, kibana) #

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - transcendence

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    ports:
      - 9201:9201
    networks:
      - transcendence

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    ports:
      - 9202:9202
    networks:
      - transcendence

  kib01:
    image: docker.elastic.co/kibana/kibana:7.5.2
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - transcendence