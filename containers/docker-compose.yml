#########################################################
#                       NETWORK                         #
#########################################################

networks:
  transcendence:
    driver: bridge

#########################################################
#                       VOLUMES                         #
#########################################################

volumes:
  content:
    driver: local
  userbase:
    driver: local
  portainer_data:
    driver: local

#########################################################
#                       SERVICES                        #
#########################################################

services:
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "1080:1080"
    restart: always
    depends_on:
      fastify:
        condition: service_healthy
    volumes:
      - content:/usr/share/nginx/html:ro
    networks:
      - transcendence

  fastify:
    build: ./fastify
    container_name: fastify
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - content:/usr/src/app/content
      - userbase:/usr/src/app/db
    restart: always
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "sqlite3", "db/mydatabase.db", "SELECT 1"]
      interval: 10s
      retries: 5
      timeout: 5s

  adminer:
    build: ./adminer
    container_name: adminer
    depends_on:
      fastify:
        condition: service_healthy
    environment:
      - PUID=1000  # Adjust to match your user ID (UID) if needed
      - PGID=1000  # Adjust to match your group ID (GID) if needed
      - TZ=Etc/UTC  # Set timezone
    volumes:
      - userbase:/db
    ports:
      - "127.0.0.1:1090:1090"
    restart: always
    networks:
      - transcendence

  portainer:
    build: ./portainer
    container_name: portainer
    ports:
      - "127.0.0.1:9000:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - transcendence

#########################################################
#                       MONITORING                      #
#########################################################

  prometheus:
    build: ./monitoring/prometheus
    container_name: prometheus
    ports:
      - "127.0.0.1:9090:9090"
    restart: always
    networks:
      - transcendence
      
  grafana:
    build: ./monitoring/grafana
    container_name: grafana
    ports:
      - "127.0.0.1:3000:3000"
    restart: always
    environment:
      - UID=1000
      - GID=1000
    networks:
      - transcendence
