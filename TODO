/*

backend/
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ logger.js     # Logger configuration
â”‚   â””â”€â”€ server.js     # Server configuration
â”œâ”€â”€ plugins/
â”‚   â”œâ”€â”€ cors.js       # CORS setup
â”‚   â”œâ”€â”€ metrics.js    # Prometheus metrics
â”‚   â””â”€â”€ healthCheck.js # Database health check
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ index.js      # Route loader
â”‚   â”œâ”€â”€ registration.js (existing)
â”‚   â””â”€â”€ google-auth.js (existing)
â”œâ”€â”€ db/
â”‚   â””â”€â”€ database.js   (existing)
â”œâ”€â”€ app.js           # Fastify app setup
â””â”€â”€ server.js        # Just server startup

*/

/*
ðŸŽ¯ Objectif

    Permettre Ã  lâ€™utilisateur de changer de langue Ã  tout moment (FR, EN, ES, etc.)

    Afficher dynamiquement tous les textes dans la langue choisie

    Conserver la langue mÃªme aprÃ¨s rechargement de la page (via localStorage)

ðŸ§± Structure recommandÃ©e

/locales/
â”œâ”€â”€ en.json
â”œâ”€â”€ fr.json
â””â”€â”€ es.json

Exemple : locales/fr.json

{
  "home_title": "Bienvenue sur Pong !",
  "play_button": "Jouer",
  "login_button": "Connexion",
  "profile_button": "Profils",
  "back_home": "Retour Ã  l'accueil"
}

Exemple : locales/en.json

{
  "home_title": "Welcome to Pong!",
  "play_button": "Play",
  "login_button": "Login",
  "profile_button": "Profiles",
  "back_home": "Back to Home"
}

ðŸ§  Ã‰tape 1 : CrÃ©er un gestionnaire de langue (lang.js)

let currentLang = localStorage.getItem('lang') || 'fr';
let translations = {};

export async function loadLanguage(lang) {
  currentLang = lang;
  localStorage.setItem('lang', lang);
  translations = await fetch(`/locales/${lang}.json`).then(res => res.json());
}

export function t(key) {
  return translations[key] || key;
}

export function getCurrentLang() {
  return currentLang;
}

ðŸ§  Ã‰tape 2 : Initialiser la langue dans index.js

import { loadLanguage, getCurrentLang } from './lang.js';
import { showHome } from './views/home.js';
// autres imports...

const app = document.getElementById('app');

async function init() {
  await loadLanguage(getCurrentLang());
  router(window.location.pathname);
}

init();

ðŸ§  Ã‰tape 3 : Utiliser les traductions dans les vues (ex. home.js)

import { t } from '../lang.js';

export function showHome(container) {
  const div = document.createElement('div');
  div.innerHTML = `
    <h1>${t('home_title')}</h1>
    <button onclick="navigate('/game')">${t('play_button')}</button>
    <button onclick="navigate('/login')">${t('login_button')}</button>
    <button onclick="navigate('/profile')">${t('profile_button')}</button>
    <select id="lang-switcher">
      <option value="fr">ðŸ‡«ðŸ‡· FR</option>
      <option value="en">ðŸ‡¬ðŸ‡§ EN</option>
      <option value="es">ðŸ‡ªðŸ‡¸ ES</option>
    </select>
  `;

  div.querySelector('#lang-switcher').value = localStorage.getItem('lang') || 'fr';
  div.querySelector('#lang-switcher').addEventListener('change', async (e) => {
    await import('../lang.js').then(async ({ loadLanguage }) => {
      await loadLanguage(e.target.value);
      location.reload(); // Simple mais efficace pour recharger les textes
    });
  });

  container.appendChild(div);
}

ðŸ§© Avantages de cette approche

    Facile Ã  maintenir : toutes les traductions dans des fichiers JSON

    Modulaire : chaque vue appelle t('clÃ©')

    Dynamique : l'utilisateur peut changer de langue sans quitter la page

    Compatible SPA : pas de rechargement complet nÃ©cessaire (Ã  part Ã©ventuellement lors du switch de langue)
*/