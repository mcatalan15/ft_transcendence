WEBSOCKETS:
	- Move the generation of obstacles and power-ups to the server side instead of the client side.

<!-- class TournamentManager {
  constructor(gameManager, redisService) {
    this.tournaments = new Map();
    this.gameManager = gameManager;
    this.redisService = redisService;
  }

  createTournament(players, config = {}) {
    const tournamentId = this.generateTournamentId();
    const bracket = this.generateBracket(players);
    
    // Store tournament info
    this.tournaments.set(tournamentId, {
      bracket,
      status: 'registration',
      players: new Set(players),
      currentRound: 0,
      config
    });
    
    return tournamentId;
  }
  
  startTournament(tournamentId) {
    const tournament = this.tournaments.get(tournamentId);
    if (!tournament) return false;
    
    tournament.status = 'in_progress';
    
    // Start first round of games
    this.scheduleRound(tournamentId, 0);
    
    return true;
  }
  
  handleGameCompletion(gameId, winnerId) {
    // Find which tournament this game belongs to
    const tournamentId = this.findTournamentByGameId(gameId);
    if (!tournamentId) return;
    
    const tournament = this.tournaments.get(tournamentId);
    
    // Update bracket with winner
    this.advancePlayer(tournamentId, winnerId);
    
    // Check if round complete, start next round if needed
    if (this.isRoundComplete(tournamentId)) {
      const nextRound = tournament.currentRound + 1;
      if (this.isTournamentComplete(tournamentId)) {
        this.finishTournament(tournamentId);
      } else {
        tournament.currentRound = nextRound;
        this.scheduleRound(tournamentId, nextRound);
      }
    }
  }
  
  // Additional tournament management methods
  // ...
} -->

# WebSocket Flow Diagram for Multiplayer Pong

## WebSocketManager Architecture

```
┌─────────────────────────────────────────────────────────────────┐
│                     WebSocketManager (Singleton)                │
├─────────────────────────────────────────────────────────────────┤
│ Properties:                                                     │
│  ┌─────────────┐  ┌───────────────┐  ┌────────────────────┐     │
│  │ socket      │  │messageHandlers│  │ gameId/playerId    │     │
│  └─────────────┘  └───────────────┘  └────────────────────┘     │
├─────────────────────────────────────────────────────────────────┤
│ Methods:                                                        │
│  ┌─────────────┐  ┌───────────────┐  ┌────────────────────┐     │
│  │ connect()   │  │ createGame()  │  │ joinGame()         │     │
│  └─────────────┘  └───────────────┘  └────────────────────┘     │
│  ┌─────────────┐  ┌───────────────┐  ┌────────────────────┐     │
│  │ send()      │  │registerHandler│  │ sendPaddleInput()  │     │
│  └─────────────┘  └───────────────┘  └────────────────────┘     │
└─────────────────────────────────────────────────────────────────┘
```

## Connection Lifecycle

```
┌────────┐        ┌────────────┐    ┌────────────┐      ┌───────┐
│ Browser│        │  Frontend  │    │  Backend   │      │ Redis │
└───┬────┘        └─────┬──────┘    └─────┬──────┘      └───┬───┘
    │    Load Lobby     │                 │                 │
    │────────────────>  │                 │                 │
    │                   │                 │                 │
    │                   │  WS Connect     │                 │
    │                   │───────────────> │                 │
    │                   │ (ws://localhost:3100/ws/socket/game/)
    │                   │                 │                 │
    │                   │ Connection OK   │                 │
    │                   │ <───────────────│                 │
    │                   │                 │                 │
    │                   │ IDENTIFY        │                 │
    │                   │───────────────> │                 │
    │                   │                 │                 │
```

## Game Creation Flow

```
┌────────┐       ┌────────────┐     ┌────────────┐      ┌───────┐
│Player 1│       │WebSocketMgr│     │  Backend   │      │ Redis │
└───┬────┘       └─────┬──────┘     └─────┬──────┘      └───┬───┘
    │  Click Create    │                  │                 │
    │────────────────> │                  │                 │
    │                  │  CREATE_GAME     │                 │
    │                  │────────────────> │                 │
    │                  │                  │ Create Game ID  │
    │                  │                  │ Store Game Data │
    │                  │                  │───────────────> │
    │                  │                  │                 │
    │                  │                  │ Create Session  │
    │                  │  GAME_CREATED    │                 │
    │                  │ <────────────────│                 │
    │                  │                  │                 │
    │ Display Game ID  │                  │                 │
    │ <───────────────────                │                 │
    │ Register         │                  │                 │
    │ PLAYER_JOINED    │                  │                 │
    │ handler          │                  │                 │
    │                  │                  │                 │
```

## Game Joining Flow

```
┌────────┐       ┌────────────┐     ┌────────────┐      ┌────────┐
│Player 2│       │WebSocketMgr│     │  Backend   │      │Player 1│
└───┬────┘       └─────┬──────┘     └─────┬──────┘      └───┬────┘
    │  Enter Game ID   │                  │                 │
    │  Click Join      │                  │                 │
    │────────────────> │                  │                 │
    │                  │   JOIN_GAME      │                 │
    │                  │────────────────> │                 │
    │                  │                  │                 │
    │                  │                  │ Update Redis    │
    │                  │                  │ Store player2   │
    │                  │  JOIN_SUCCESS    │                 │
    │                  │ <────────────────│                 │
    │                  │                  │                 │
    │                  │                  │  PLAYER_JOINED  │
    │                  │                  │───────────────> │
    │                  │                  │                 │
    │                  │                  │                 │
    │                  │   PLAYER_ASSIGNED│                 │
    │                  │ <────────────────│                 │
    │                  │                  │  PLAYER_ASSIGNED│
    │                  │                  │───────────────> │
    │                  │                  │                 │
    │                  │                  │  GAME_START     │
    │                  │                  │───────────────> │
    │                  │   GAME_START     │                 │
    │                  │ <────────────────│                 │
    │                  │                  │                 │
    │  Navigate to     │                  │    Navigate to  │
    │  Game Screen     │                  │    Game Screen  │
    │                  │                  │                 │
```

## Game State Synchronization (60 FPS)

```
┌────────────┐      ┌────────────┐      ┌────────────┐      ┌────────────┐
│  Player 1  │      │   Backend  │      │  Player 2  │      │ Game Loop  │
└─────┬──────┘      └──────┬─────┘      └─────┬──────┘      └─────┬──────┘
      │                    │                  │                   │
      │                    │                  │     Tick (60 FPS) │
      │                    │ <────────────────────────────────────│
      │                    │                  │                   │
      │                    │ Update Game State│                   │
      │                    │─────────────────>│                   │
      │                    │                  │                   │
      │  GAME_STATE_UPDATE │                  │                   │
      │ <─────────────────────────────────────────────────────────│
      │                    │                  │                   │
      │                    │  GAME_STATE_UPDATE                   │
      │                    │─────────────────>│                   │
      │                    │                  │                   │
      │   Render Game      │                  │    Render Game    │
      │                    │                  │                   │
```

## Input Handling Flow

```
┌────────┐      ┌────────────┐      ┌────────────┐      ┌────────────┐
│Player 1│      │WebSocketMgr│      │  Backend   │      │Game Session│
└───┬────┘      └─────┬──────┘      └─────┬──────┘      └─────┬──────┘
    │  Press 'W' key  │                   │                   │
    │────────────────>│                   │                   │
    │                 │                   │                   │
    │                 │  PADDLE_INPUT     │                   │
    │                 │ (player: 1, dir: -1)                  │
    │                 │────────────────>  │                   │
    │                 │                   │                   │
    │                 │                   │ setPlayerInput()  │
    │                 │                   │──────────────────>│
    │                 │                   │                   │
    │                 │                   │                   │
    │                 │                   │  Update paddle    │
    │                 │                   │  position         │
    │                 │                   │  <────────────────│
    │                 │                   │                   │
    │                 │                   │                   │
```

## Cross-Browser Issue in Joining Flow

```
┌─────────┐         ┌───────────┐         ┌────────────┐         ┌─────────┐
│Firefox  │         │  Backend  │         │  Chrome    │         │  Redis  │
│(Host)   │         │           │         │(Player 2)  │         │         │
└────┬────┘         └─────┬─────┘         └─────┬──────┘         └────┬────┘
     │  Create Game       │                     │                     │
     │──────────────────> │                     │                     │
     │                    │                     │                     │
     │ GAME_CREATED       │                     │                     │
     │ <──────────────────│                     │                     │
     │                    │  Store Game         │                     │
     │                    │────────────────────>│                     │
     │                    │                     │                     │
     │ Register for       │                     │                     │
     │ 'PLAYER_JOINED'    │                     │                     │
     │                    │                     │                     │
     │                    │                     │ Join Game           │
     │                    │ <────────────────────────────────────────>│
     │                    │                     │                     │
     │                    │ JOIN_SUCCESS        │                     │
     │                    │──────────────────>  │                     │
     │                    │                     │                     │
     │                    │ PLAYER_JOINED       │                     │
     │                    │ to Firefox          │                     │
     ├ - - - - - - - - - >│                     │                     │
     │ ✗ ISSUE: Handler   │                     │                     │
     │ doesn't catch      │                     │                     │
     │ due to             │                     │                     │
     │ case sensitivity   │                     │                     │
     │ or socket issues   │                     │                     │
     │                    │                     │                     │

I need to take a major step in the development of this web app: the implementation of online gaming via WebSockets and a server authoritative approach. I already have a minimalistic implementation that worked with a simple pong game using a lobby system. However, I need to do something similar but with the actual game located in the frontend in the folder /pong. The game itself already has some mechanics implemented, for example the menu 'Start' has options such as 'local' or 'online', '1v1' or 'tournament', etc. For the moment I only need to work on 'online' with '1v1' selected. Selecting this should create a token and open a WebSocket connection, and make the player wait for the second player to join. When the second player joins using the token, the game should start and both players should be able to see the paddles move, player1 on the left and player2 on the right, and the ball movements. 