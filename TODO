/*
âœ… Objectif : transformer index.js en gestionnaire de navigation
Ã‰tape 1 : crÃ©er une structure de navigation de base

Tu vas organiser ton projet comme ceci :

/ft_transcendence/
â”œâ”€â”€ index.html
â”œâ”€â”€ index.js             <-- GÃ¨re la navigation
â”œâ”€â”€ styles/
â”‚   â””â”€â”€ styles.css
â”œâ”€â”€ views/
â”‚   â”œâ”€â”€ home.js          <-- Accueil (menu principal)
â”‚   â”œâ”€â”€ login.js         <-- Connexion / Google login
â”‚   â”œâ”€â”€ pong.js          <-- Jeu Pong
â”‚   â”œâ”€â”€ profile.js       <-- Profils utilisateurs
â”‚   â””â”€â”€ tournament.js    <-- Tournois

Ã‰tape 2 : index.js â€“ gestion de la navigation SPA

import { showHome } from './views/home.js';
import { showPong } from './views/pong.js';
import { showProfile } from './views/profile.js';
import { showLogin } from './views/login.js';

const app = document.getElementById('app');

Navigation SPA sans recharger la page
function navigate(path) {
  history.pushState({}, '', path);
  router(path);
}

window.navigate = navigate; // Accessible depuis HTML ou d'autres modules

Routeur simple
function router(path) {
  app.innerHTML = ''; // Vide le conteneur

  switch (path) {
    case '/':
      showHome(app);
      break;
    case '/login':
      showLogin(app);
      break;
    case '/game':
      showPong(app);
      break;
    case '/profile':
      showProfile(app);
      break;
    default:
      app.innerHTML = '<h2>Page non trouvÃ©e</h2>';
  }
}

Support du bouton retour navigateur
window.addEventListener('popstate', () => {
  router(window.location.pathname);
});

Lancer la vue initiale
router(window.location.pathname);

Ã‰tape 3 : Exemple dâ€™un Ã©cran dâ€™accueil views/home.js

export function showHome(container) {
  const homeDiv = document.createElement('div');
  homeDiv.innerHTML = `
    <h1>Bienvenue sur Pong !</h1>
    <button onclick="navigate('/login')">Connexion</button>
    <button onclick="navigate('/game')">Jouer</button>
    <button onclick="navigate('/profile')">Profils</button>
  `;
  container.appendChild(homeDiv);
}

Ã‰tape 4 : Un exemple minimal pour views/pong.js

export function showPong(container) {
  const gameDiv = document.createElement('div');
  gameDiv.innerHTML = `
    <h2>Le Jeu Pong</h2>
    <canvas id="game-canvas" width="800" height="400"></canvas>
    <button onclick="navigate('/')">Retour Ã  l'accueil</button>
  `;
  container.appendChild(gameDiv);

  Ensuite, tu peux appeler ici ton code du jeu
  Par exemple :
  initGame(document.getElementById('game-canvas'));
}

ðŸ§© Bonus : interaction avec ton code Google Sign-In

Tu peux intÃ©grer le bouton Google dans la vue login.js, en lâ€™important ou en recrÃ©ant la structure nÃ©cessaire dans showLogin.
âœ… RÃ©sumÃ©

Tu nâ€™as pas besoin de crÃ©er plusieurs fichiers HTML : câ€™est ton index.js qui devient le contrÃ´leur central de lâ€™application. Il charge dynamiquement la bonne vue dans le #app en fonction de l'URL, sans recharger la page.
*/






/*
ðŸŽ¯ Objectif

    Permettre Ã  lâ€™utilisateur de changer de langue Ã  tout moment (FR, EN, ES, etc.)

    Afficher dynamiquement tous les textes dans la langue choisie

    Conserver la langue mÃªme aprÃ¨s rechargement de la page (via localStorage)

ðŸ§± Structure recommandÃ©e

/locales/
â”œâ”€â”€ en.json
â”œâ”€â”€ fr.json
â””â”€â”€ es.json

Exemple : locales/fr.json

{
  "home_title": "Bienvenue sur Pong !",
  "play_button": "Jouer",
  "login_button": "Connexion",
  "profile_button": "Profils",
  "back_home": "Retour Ã  l'accueil"
}

Exemple : locales/en.json

{
  "home_title": "Welcome to Pong!",
  "play_button": "Play",
  "login_button": "Login",
  "profile_button": "Profiles",
  "back_home": "Back to Home"
}

ðŸ§  Ã‰tape 1 : CrÃ©er un gestionnaire de langue (lang.js)

let currentLang = localStorage.getItem('lang') || 'fr';
let translations = {};

export async function loadLanguage(lang) {
  currentLang = lang;
  localStorage.setItem('lang', lang);
  translations = await fetch(`/locales/${lang}.json`).then(res => res.json());
}

export function t(key) {
  return translations[key] || key;
}

export function getCurrentLang() {
  return currentLang;
}

ðŸ§  Ã‰tape 2 : Initialiser la langue dans index.js

import { loadLanguage, getCurrentLang } from './lang.js';
import { showHome } from './views/home.js';
// autres imports...

const app = document.getElementById('app');

async function init() {
  await loadLanguage(getCurrentLang());
  router(window.location.pathname);
}

init();

ðŸ§  Ã‰tape 3 : Utiliser les traductions dans les vues (ex. home.js)

import { t } from '../lang.js';

export function showHome(container) {
  const div = document.createElement('div');
  div.innerHTML = `
    <h1>${t('home_title')}</h1>
    <button onclick="navigate('/game')">${t('play_button')}</button>
    <button onclick="navigate('/login')">${t('login_button')}</button>
    <button onclick="navigate('/profile')">${t('profile_button')}</button>
    <select id="lang-switcher">
      <option value="fr">ðŸ‡«ðŸ‡· FR</option>
      <option value="en">ðŸ‡¬ðŸ‡§ EN</option>
      <option value="es">ðŸ‡ªðŸ‡¸ ES</option>
    </select>
  `;

  div.querySelector('#lang-switcher').value = localStorage.getItem('lang') || 'fr';
  div.querySelector('#lang-switcher').addEventListener('change', async (e) => {
    await import('../lang.js').then(async ({ loadLanguage }) => {
      await loadLanguage(e.target.value);
      location.reload(); // Simple mais efficace pour recharger les textes
    });
  });

  container.appendChild(div);
}

ðŸ§© Avantages de cette approche

    Facile Ã  maintenir : toutes les traductions dans des fichiers JSON

    Modulaire : chaque vue appelle t('clÃ©')

    Dynamique : l'utilisateur peut changer de langue sans quitter la page

    Compatible SPA : pas de rechargement complet nÃ©cessaire (Ã  part Ã©ventuellement lors du switch de langue)
*/